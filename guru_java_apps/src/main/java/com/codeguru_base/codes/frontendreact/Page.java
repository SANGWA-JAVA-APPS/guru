/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package com.codeguru_base.codes.frontendreact;

import lombok.NoArgsConstructor;

/**
 *
 * @author SANGWA Emmanuel code [CODEGURU - info@codeguru.com]
 */
@NoArgsConstructor
public class Page extends PagesMethods {

    public String Page(String unit_name, String declare, String fieldsObjectDeclare,
            String setFieldsOnUpdate, String resetAfterSave, String unitInputRow, String tableHeaderFields,
            String tablebodyFields) {

        return " import React, { useState, useRef, useEffect, useContext } from 'react'\n"
                + "import PagesWapper from '../Global/PagesWapper'\n"
                + "import { useReactToPrint } from \"react-to-print\"\n"
                + "import SessionTime from '../../services/SessionTime'\n"
                + "import axios from 'axios'\n"
                + "import Commons from '../../services/Commons'\n"
                + "import Repository from \"../../services/Repository\"\n"
                + "import VertNavBar from '../Navbar/VertNavBar'\n"
                + "import AnimateHeight from 'react-animate-height'\n"
                + "\n"
                + "\n"
                + "\n"
                + "import UpdatedComponent from '../Global/HOCForm'\n"
                + "import { Link, Route, Routes, useParams } from 'react-router-dom';\n"
                + "\n"
                + "\n"
                + "\n"
                + "import PrintCompanyInfo from '../Global/PrintCompanyInfo'\n"
                + "import Loader, { DataListLoading } from '../Global/Loader';\n"
                + "import TableHead from '../Global/TableHead'\n"
                + "import SearchBox from '../Global/SearchBox'\n"
                + "import DatePicker from \"react-datepicker\";\n"
                + "import 'react-datepicker/dist/react-datepicker.css'\n"
                + "\n"
                + "import SideBar from '../Navbar/SideBar'\n"
                + "import Dashboard from './Dashboard'\n"
                + "import About from './About'\n"
                + "\n"
                + "import ContainerRow, { ClearBtnSaveStatus, ContainerRowBtwb, ContainerRowBtwn, ContainerRowHalf, FormInnerRightPane, FormSidePane, SaveUpdateBtns } from '../Global/ContainerRow'\n"
                + "import InputRow, { DropDownInput, EmptyInputRow } from '../Global/Forms/InputRow'\n"
                + "import FormTools from '../Global/Forms/PubFnx'\n"
                + "import ListToolBar, { SearchformAnimation } from '../Global/ListToolBar'\n"
                + "import ListOptioncol, { TableOpen } from '../Global/ListTable'\n"
                + "import Utils from '../Global/Utils'\n"
                + "import Delete from '../../services/Delete'\n"
                + "\n"
                + "function " + pm.get_Capitalized(unit_name) + "() {\n"
                + "  const [id, setId] = useState(null)\n"
                + "\n"
                + "  /*#region ---------- ENTITY FIELDS DECLARATIONS ---------------------------*/\n"
                + declare
                + "\n"
                + "  /*#endregion Listing data*/\n"
                + "\n"
                + "  const [showLoader, setShowLoader] = useState(false)\n"
                + "  const [showAlert, setShowAlert] = useState(false)\n"
                + "  const [" + unit_name + "s, set" + pm.get_Capitalized(unit_name) + "s] = useState([]) //Data List\n"
                + "  const [clearBtn, setClearBtn] = useState(false) //The cancel button\n"
                + "\n"
                + "  const [dataLoad, setDataLoad] = useState(false)\n"
                + "  const [height, setHeight] = useState(0);\n"
                + "  const [searchHeight, setSearchHeight] = useState(0);\n"
                + "\n"
                + "\n"
                + "  /*#region ---------- SAVING DATA TO DB--------------------------------------*/\n"
                + "  const onSubmitHandler = (e) => {\n"
                + "    e.preventDefault()\n"
                + "    setShowLoader(true)\n"
                + "\n"
                + "    var mdl_" + unit_name + "= {\n"
                + fieldsObjectDeclare + "      \n"
                + "    }\n"
                + "    if (id) {\n"
                + "      Commons.updateUnit(mdl_" + unit_name + ", id).then((res) => {\n"
                + "        resetAfterSave()\n"
                + "      })\n"
                + "    } else {\n"
                + "      Commons.save" + pm.get_Capitalized(unit_name) + "(mdl_" + unit_name + ").then((res) => {\n"
                + "        console.log(res.data)\n"
                + "        if (res.data != null) {\n"
                + "          resetAfterSave()\n"
                + "        }\n"
                + "      }).catch((error) => {\n"
                + "        console.log('-----------')\n"
                + "        alert('Error Occured')\n"
                + "      })\n"
                + "    }\n"
                + "  }\n"
                + "  /*#endregion Listing data*/\n"
                + "\n"
                + "  /*#region ------------All Records, Deleting and By Id------------------------*/\n"
                + "  const getAll" + pm.get_Capitalized(unit_name) + "s = () => {\n"
                + "    Repository.find" + pm.get_Capitalized(unit_name) + "().then((res) => {\n"
                + "      set" + pm.get_Capitalized(unit_name) + "s(res.data);\n"
                + "      setDataLoad(true)\n"
                + "    });\n"
                + "  }\n"
                + "\n"
                + "  useEffect(() => {\n"
                + "    getAll" + pm.get_Capitalized(unit_name) + "s()\n"
                + "  }, []);\n"
                + "\n"
                + "\n"
                + "  const get" + pm.get_Capitalized(unit_name) + "ById = (id) => {\n"
                + "    Repository.find" + pm.get_Capitalized(unit_name) + "ById(id).then((res) => {\n"
                + setFieldsOnUpdate
                + "      setClearBtn(true)\n"
                + "      showheight('auto')\n"
                + "    })\n"
                + "  }\n"
                + "  const del" + pm.get_Capitalized(unit_name) + "ById = (id) => {\n"
                + "    Utils.Submit(() => {\n"
                + "      Delete.delete" + pm.get_Capitalized(unit_name) + "ById(id, () => { getAll" + pm.get_Capitalized(unit_name) + "s() })\n"
                + "    }, () => { })\n"
                + "  }\n"
                + "  /*#endregion Listing data*/\n"
                + "\n"
                + "  /*#region ---------Show Height, reset all and clear Button   ------------*/\n"
                + "  function showheight(type) {\n"
                + "    setHeight(type)\n"
                + "  }\n"
                + "  const resetAfterSave = () => {\n"
                + "    document.getElementById(\"Form\").reset();\n"
                + "    getAll" + pm.get_Capitalized(unit_name) + "s()\n"
                + "    setShowLoader(false)\n"
                + "    setShowAlert(true)\n"
                + "    setHeight(0)\n"
                + resetAfterSave
                + "} "
                + " const clearHandle = () => {\n"
                + resetAfterSave
                + "  }"
                + "    setClearBtn(false)\n"
                + "\n"
                + "  /*#endregion Listing data*/\n"
                + "\n"
                + "\n"
                + "  /*#region Printing */\n"
                + "  const componentRef = useRef();\n"
                + "  const handlePrint = useReactToPrint({\n"
                + "    content: () => componentRef.current,\n"
                + "    documentTitle: 'emp-data'\n"
                + "  });\n"
                + "  /*#endregion Listing data*/\n"
                + "\n"
                + "  return (\n"
                + "    <PagesWapper>\n"
                + "      <SideBar>\n"
                + "        <Routes>\n"
                + "          <Route path=\"/dashboard\" element={<Dashboard />} />\n"
                + "          <Route path=\"/about\" element={<About />} />\n"
                + "        </Routes>\n"
                + "      </SideBar>\n"
                + "      <AnimateHeight id=\"animForm\" duration={300} animateOpacity={true} height={height}>\n"
                + "        <ContainerRowBtwn clearBtn={clearBtn} form='" + pm.get_Capitalized(unit_name) + "' showLoader={showLoader}  >\n"
                + "          <ClearBtnSaveStatus height={height} showLoader={showLoader} showAlert={showAlert} />\n"
                + "          <FormInnerRightPane onSubmitHandler={onSubmitHandler}>\n"
                + unitInputRow
                + "            <SaveUpdateBtns clearBtn={clearBtn} clearHandle={clearHandle} saveOrUpdate={FormTools.BtnTxt(clearBtn)} />\n"
                + "          </FormInnerRightPane>\n"
                + "          <FormSidePane />\n"
                + "        </ContainerRowBtwn>\n"
                + "      </AnimateHeight>\n"
                + "      <ContainerRow mt='3'>\n"
                + "        <ListToolBar listTitle='" + pm.get_Capitalized(unit_name) + " List' height={height} entity='Unit' changeFormHeightClick={() => setHeight(height === 0 ? 'auto' : 0)} changeSearchheight={() => setSearchHeight(searchHeight === 0 ? 'auto' : 0)} handlePrint={handlePrint} searchHeight={searchHeight} />\n"
                + "        <SearchformAnimation searchHeight={searchHeight}>\n"
                + "          <SearchBox />\n"
                + "        </SearchformAnimation>\n"
                + "\n"
                + "        <div ref={componentRef} className=\"dataTableBox\">\n"
                + "          <PrintCompanyInfo />\n"
                + "          <TableOpen>\n"
                + "            <TableHead>\n"
                + tableHeaderFields
                + "              <td className='delButton'>Option</td>\n"
                + "            </TableHead>\n"
                + "            <tbody>\n"
                + "              {" + unit_name + "s.map((" + unit_name + ") => (\n"
                + "                <tr key={" + unit_name + ".id}>\n"
                + tablebodyFields
                + "                  <ListOptioncol getEntityById={() => get" + pm.get_Capitalized(unit_name) + "ById(" + unit_name + ".id)} delEntityById={() => del" + pm.get_Capitalized(unit_name) + "ById(" + unit_name + ".id)} />\n"
                + "                </tr>\n"
                + "              ))}</tbody>\n"
                + "          </TableOpen>\n"
                + "        </div>\n"
                + "      </ContainerRow>\n"
                + "      {!dataLoad && <DataListLoading />\n"
                + "      }\n"
                + "\n"
                + "    </PagesWapper>\n"
                + "\n"
                + "\n"
                + "  );\n"
                + "}\n"
                + "\n"
                + "export default " + pm.get_Capitalized(unit_name) + ";";
    }

}
